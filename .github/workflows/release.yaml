name: Release
on:
  push:
    tags: ["v[0-9]+.[0-9]+.[0-9]+"]

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Registry Login (ghcr.io)
        run: echo "${{ secrets.GH_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
      - name: Parse version info from tag
        run: |
          # GITHUB_REF is like refs/tags/v2.3.5, so strip the first 11 chars
          VERSION=${GITHUB_REF:11}
          MAJOR=`echo "$VERSION" | cut -d . -f 1`
          MINOR=`echo "$VERSION" | cut -d . -f 2`
          PATCH=`echo "$VERSION" | cut -d . -f 3`
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "version_major=$MAJOR" >> $GITHUB_ENV
          echo "version_minor=$MINOR" >> $GITHUB_ENV
          echo "version_patch=$PATCH" >> $GITHUB_ENV
      - name: Build and Push Docker Image
        run: |
          IMG=ghcr.io/${{ github.repository }}
          IMG=${IMG,,}
          docker build \
            --tag $IMG:${{ env.version }} \
            --tag $IMG:${{ env.version_major }}.${{ env.version_minor }}.latest \
            --tag $IMG:${{ env.version_major }}.latest \
            --tag $IMG:latest \
            .
          docker push --all-tags $IMG
  lint:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Install poetry
        run: curl -sSL https://install.python-poetry.org | python3 - --version=1.5.0

      - uses: actions/setup-python@v3
        with:
          python-version: '3.10'
          cache: 'poetry'

      - name: Install dependencies
        run: poetry -vv install --no-interaction --no-ansi

      - name: Run linting
        run: poetry run pylint --load-plugins=dslinter src tests

  test:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: curl -sSL https://install.python-poetry.org | python3 - --version=1.5.0

      - uses: actions/setup-python@v3
        with:
          python-version: '3.10'
          cache: 'poetry'

      - name: Install dependencies
        run: poetry -vv install --no-interaction --no-ansi

      - name: Add current directory to PYTHONPATH
        run: |
          echo "PYTHONPATH=$PWD" >> "$GITHUB_ENV"

      - name: Restore DVC cache
        uses: actions/cache/restore@v3
        id: restore-cache
        with:
          path: ./.dvc/cache
          key: cache-${{ hashFiles('dvc.lock') }}

      - name: Run DVC pipeline
        run: poetry run dvc repro

      - name: Cache DVC pipeline
        uses: actions/cache@v3
        with:
          path: ./.dvc/cache  # Adjust the path to your DVC cache directory
          key: ${{ runner.os }}-dvc-${{ hashFiles('dvc.lock') }}

      - name: Run tests with coverage
        run: poetry run pytest --junitxml=tests-report.xml --cov=tests/ --cov-report=xml
